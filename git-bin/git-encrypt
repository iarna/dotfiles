#!/bin/bash

readonly VERSION="0.3.2"
readonly DEFAULT_CIPHER="aes-256-ecb"

[ -z "$GIT_DIR" ] && GIT_DIR=".git"

_disable() {
	git config --unset filter.encrypt.smudge
	git config --unset filter.encrypt.clean
	git config --unset diff.encrypt.textconv
	echo "git-encrypt filter disabled"
}

_enable() {
	git config filter.encrypt.smudge "git encrypt smudge"
	git config filter.encrypt.clean "git encrypt clean"
	git config diff.encrypt.textconv "git encrypt diff"
	echo "git-encrypt filter enabled"
}

init_config() {
	local answer

	# From git 1.7.8+, the .git in submodule folder is a file containing the actual path of gitdir.
	if [ -f "$GIT_DIR" ]; then
		GIT_DIR=`cat $GIT_DIR | sed 's/^gitdir: //'`
	fi

	if [ ! -d "$GIT_DIR" ]; then
		echo "Directory is not a git repository. Did you forget to run 'git init'?"
		return 1
	fi

	while [ 1 ]; do
		while [ -z "$SALT" ]; do
			echo -n "Generate a random salt? [Y/n] "
			read answer

			case "$answer" in
				n*|N*)
					echo -n "Shared salt as hex characters: "
					read SALT

					if [ $(echo "$SALT" | grep '[^a-f0-9]' | wc -l) -ne 0 ]; then
						echo "Error: non-hex characters in salt"
						unset -v SALT
					fi
					;;
				*)
					local md5=$(which md5 2>/dev/null || which md5sum 2>/dev/null)
					SALT=$(head -c 10 < /dev/random | $md5 | cut -c-16)
					;;
			esac
		done

		while [ -z "$PASS" ]; do
			echo -n "Generate a random password? [Y/n]"
			read answer

			case "$answer" in
				n*|N*)
					echo -n "Enter your passphrase: "
					read -s PASS
					echo
					;;
				*)
					PASS=$(cat /dev/urandom | LC_ALL="C" tr -dc '!@#$%^&*()_A-Z-a-z-0-9' | head -c32)
					;;
			esac
		done

		while [ 1 ]; do
			echo -n "What encryption cipher do you want to use? [$DEFAULT_CIPHER] "
			read CIPHER
			[ -z "$CIPHER" ] && CIPHER="$DEFAULT_CIPHER"

			local exists
			exists=$(openssl list-cipher-commands | grep "$CIPHER")
			[ $? -eq 0 ] && break

			echo "Error: Cipher '$CIPHER' is not available"
		done

		echo -e "\nThis configuration will be stored:\n"
		echo "salt:   $SALT"
		echo "pass:   *****************"
		echo "cipher: $CIPHER"
		echo -e -n "\nDoes this look right? [Y/n] "
		read answer

		case "$answer" in
			n*|N*)
				# Reconfigure
				unset -v SALT
				unset -v PASS
				unset -v CIPHER
				;;
			*)
				# Finished
				break
				;;
		esac
	done

	echo -n "Do you want to use $GIT_DIR/info/attributes? [Y/n] "
	read answer

	local attrs
	case "$answer" in
		n*|N*)
			attrs=".gitattributes"
			;;
		*)
			attrs="$GIT_DIR/info/attributes"
			;;
	esac

	local pattern
	echo -n "What files do you want encrypted? [*] "
	read pattern
	[ -z "$pattern" ] && pattern="*"

	echo "$pattern filter=encrypt diff=encrypt" >> $attrs
	echo "[merge]" >> $attrs
	echo "    renormalize=true" >> $attrs

	# Encryption
	git config git-encrypt.salt "$SALT"
	git config git-encrypt.pass "$PASS"
	git config git-encrypt.cipher "$CIPHER"

	# Filters
	_enable
}

_clean() {
	# Encrypt using OpenSSL
	openssl enc -base64 -$CIPHER -S "$SALT" -k "$PASS"
}

_smudge() {
	# If decryption fails, use `cat` instead
	openssl enc -d -base64 -$CIPHER -k "$PASS" 2> /dev/null || cat
}

_diff() {
	# If decryption fails, use `cat` instead
	openssl enc -d -base64 -$CIPHER -k "$PASS" -in "$1" 2> /dev/null || cat "$1"
}

_crypthistory_impl() {
	_disable
	git reset --hard
	git filter-branch --prune-empty --tree-filter "git encrypt-filter $0 clean" -f
	_enable
	git reset --hard
}

_crypthistory() {
	echo -n "You MUST run 'crypthistory' BEFORE any encrypted commits."
	echo -n "Do you want to recrypt all history? This may corrut your data? [Y/n]"
	read answer

	case "$answer" in
		n*|N*)
			exit 0
			;;
		*)
			echo "This may take a while depends on file sizes in repo..."
			;;
	esac

	_crypthistory_impl
}

_decrypthistory() {
	_disable
	git reset --hard
	git filter-branch --prune-empty --tree-filter "git encrypt-filter $0 smudge" -f
	_enable
	git reset --hard
}

_recrypt() {
	echo -n "Do you want to change password and recrypt repo with new one? [Y/n]"
	read answer

	case "$answer" in
		n*|N*)
			exit 0
			;;
		*)
			echo -n "Enter your passphrase: "
			read PASS
			;;
	esac

	_decrypthistory
	git config git-encrypt.pass "$PASS"
	_crypthistory_impl
}

case "$1" in
	clean|smudge|diff|enable|disable|crypthistory|decrypthistory|recrypt)
		# Need a shared salt
		SALT=$(git config git-encrypt.salt || git config gitcrypt.salt)
		if [ -z "$SALT" ]; then
			echo "git-encrypt: shared salt (git-encrypt.salt) has not been configured"
			exit 1
		fi

		# Need a secure passphrase
		PASS=$(git config git-encrypt.pass || git config gitcrypt.pass)
		if [ -z "$PASS" ]; then
			echo "git-encrypt: secure passphrase (git-encrypt.pass) has not been configured"
			exit 1
		fi

		# And a cipher mode
		CIPHER=$(git config git-encrypt.cipher || git config gitcrypt.cipher)
		[ -z "$CIPHER" ] && CIPHER="$DEFAULT_CIPHER"

		# Execute command
		_$1 "$2"
		;;
	init)
		# Run setup commands
		init_config
		;;
	version)
		# Show version
		echo "git-encrypt version $VERSION"
		;;
	*)
		# Not a valid option
    if [ -z "$1" ]; then
      echo "git-encrypt: available options: init, version"
    else
		  echo "git-encrypt: command does not exist: $1"
    fi
		exit 1
		;;
esac
exit 0
