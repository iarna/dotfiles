(custom-set-variables
  ;; custom-set-variables was added by Custom -- don't edit or cut/paste it!
  ;; Your init file should contain only one such instance.
 '(auto-compression-mode t nil (jka-compr))
 '(case-fold-search t)
 '(global-font-lock-mode t nil (font-lock))
 '(show-paren-mode t nil (paren))
 '(transient-mark-mode t)
 '(kill-whole-line t)
 '(cperl-pod-face (quote font-lock-comment-face))
 '(cperl-ps-print-face-properties (quote ((font-lock-keyword-face nil nil bold) (font-lock-variable-name-face nil nil bold) (font-lock-function-name-face nil nil bold italic box) (font-lock-constant-face nil "LightGray" bold) (cperl-array-face nil "LightGray" bold underline) (cperl-hash-face nil "LightGray" bold italic underline) (font-lock-comment-face nil "LightGray" italic) (font-lock-string-face nil nil italic underline) (cperl-nonoverridable-face nil nil italic underline) (font-lock-type-face nil nil underline) (underline nil "LightGray" strikeout))))
 '(truncate-lines nil)
 '(cperl-indent-level 4)
 '(cperl-electric-parens-string "")
 '(cperl-invalid-face (quote (quote bold)))
 '(cperl-extra-newline-before-brace nil)
 '(standard-indent 2)
 '(paren-mode (quote sexp) nil (paren))
 '(query-user-mail-address nil)
 '(indent-tabs-mode nil)
 '(cperl-pod-head-face (quote font-lock-variable-name-face))
 '(scrollbars-visible-p t)
 '(cperl-extra-newline-before-brace-multiline nil)
 '(cperl-auto-newline nil)
 '(cperl-message-electric-keyword nil)
)

; Markdown support
(autoload 'markdown-mode "markdown-mode"
   "Major mode for editing Markdown files" t)
(add-to-list 'auto-mode-alist '("\\.text\\'" . markdown-mode))
(add-to-list 'auto-mode-alist '("\\.markdown\\'" . markdown-mode))
(add-to-list 'auto-mode-alist '("\\.md\\'" . markdown-mode))

(custom-set-faces
  ;; custom-set-faces was added by Custom -- don't edit or cut/paste it!
  ;; Your init file should contain only one such instance.
 '(default ((t (:foreground "#a0a0a0" :background "#000000" :size "16pt" :family "Clean" :bold t))))
 '(cperl-pod-face ((((type x) (class color)) (:background "#000060"))))
 '(cperl-nonoverridable-face ((((class color) (background dark)) (:bold t))))
 '(list-mode-item-selected ((t (:foreground "black" :background "gray68"))) t)
 '(font-lock-comment-face ((((class color) (background dark)) (:foreground "#dfdfdf" :background "#151560"))))
 '(font-lock-other-type-face ((t nil)) t)
 '(cperl-array-face ((t (:foreground "#ffafaf"))))
 '(font-lock-keyword-face ((nil nil)))
 '(isearch ((t (:foreground "black" :background "paleturquoise"))) t)
 '(primary-selection ((t (:foreground "black" :background "#afafaf"))) t)
 '(paren-match ((t (:foreground "black" :background "darkseagreen2"))) t)
 '(widget-field-face ((((class grayscale color) (background light)) (:foreground "black" :background "gray85"))))
 '(font-lock-preprocessor-face ((((class color) (background light)) (:foreground "blue"))))
 '(zmacs-region ((t (:foreground "black" :background "gray65"))) t)
 '(w3-table-hack-x-face ((t (:bold t :underline nil))) t)
 '(cperl-here-face ((((type x) (class color)) (:foreground "green1"))))
 '(highlight ((t (:foreground "black" :background "darkseagreen2"))))
 '(font-lock-variable-name-face ((((class color) (background dark)) (:foreground "#ffffff"))))
 '(cperl-hash-face ((t (:foreground "#afffff"))))
 '(paren-mismatch ((t (:foreground "black" :background "DeepPink"))) t)
)
; cperl-mode is fun. It's even more fun in HairyMode! Yay!

(load-library "cperl-mode")
(autoload 'perl-mode "cperl-mode" "alternate mode for editing Perl programs" t)
;(setq cperl-hairy t)
(setq cperl-font-lock t)
(define-key global-map [M-S-down-mouse-3] 'imenu)

; Oh! I don't want help to appear when I hit Backspace!

(global-set-key [?\C-o] 'yank)
(global-set-key [?\M-o] 'yank-pop)
(global-set-key [?\C-h] 'delete-backward-char)
(global-set-key [?\C-x ?h] 'help-command)
;(setq-default auto-fill-hook 'do-auto-fill)
;(transient-mark-mode t)
;(load-library "hscroll")
(setq auto-mode-alist (cons '("\\pm\\'" . cperl-mode) auto-mode-alist))
(setq auto-mode-alist (cons '("\\pl\\'" . cperl-mode) auto-mode-alist))
(setq auto-mode-alist (cons '("\\cgi\\'" . cperl-mode) auto-mode-alist))
;(setq hscroll-global-mode 1)

; Add joe-type keybindings, based on wordstar

(load-library "ws-mode")
(setq joe-C-k-map (make-keymap))
(setq joe-C-c-map (make-keymap))
(define-key joe-C-k-map "f" 'query-replace)
(define-key joe-C-k-map "\C-f" 'query-replace)
(define-key joe-C-k-map "l" 'goto-line)
(define-key joe-C-k-map "\C-l" 'goto-line)
(define-key joe-C-k-map "b" 'ws-begin-block)
(define-key joe-C-k-map "\C-b" 'ws-begin-block)
(define-key joe-C-k-map "c" 'ws-copy-block)
(define-key joe-C-k-map "\C-c" 'ws-copy-block)
(define-key joe-C-k-map "y" 'ws-delete-block)
(define-key joe-C-k-map "\C-y" 'ws-delete-block)
(define-key joe-C-k-map "." 'ws-indent-block)
(define-key joe-C-k-map "k" 'ws-end-block)
(define-key joe-C-k-map "\C-k" 'ws-end-block)
(define-key joe-C-k-map "m" 'ws-move-block)
(define-key joe-C-k-map "\C-m" 'ws-move-block)
(define-key joe-C-k-map "q" 'save-buffers-kill-emacs)
(define-key joe-C-k-map "\C-q" 'save-buffers-kill-emacs)
(define-key joe-C-k-map "r" 'insert-file)
(define-key joe-C-k-map "\C-r" 'insert-file)
(define-key joe-C-k-map "s" 'save-buffer)
(define-key joe-C-k-map "\C-s" 'save-buffer)
(define-key joe-C-k-map "," 'ws-exdent-block)
(define-key joe-C-k-map "a" 'wordstar-center-line)
(define-key joe-C-k-map "\C-a" 'wordstar-center-line)
(define-key joe-C-k-map "o" 'split-window-vertically)
(define-key joe-C-k-map "\C-o" 'split-window-vertically)
(define-key joe-C-k-map "n" 'other-window)
(define-key joe-C-k-map "\C-n" 'other-window)
(define-key joe-C-k-map "p" 'other-window)
(define-key joe-C-k-map "\C-p" 'other-window)
(define-key joe-C-k-map "i" 'delete-other-windows)
(define-key joe-C-k-map "\C-i" 'delete-other-windows)
(define-key joe-C-k-map "v" 'end-of-buffer)
(define-key joe-C-k-map "\C-v" 'end-of-buffer)
(define-key joe-C-k-map "u" 'beginning-of-buffer)
(define-key joe-C-k-map "\C-u" 'beginning-of-buffer)
(define-key joe-C-k-map "e" 'find-file)
(define-key joe-C-k-map "\C-e" 'find-file)
(define-key joe-C-k-map "o" 'split-window-vertically)
(define-key joe-C-k-map "\C-o" 'split-window-vertically)
(global-set-key [?\C-k] joe-C-k-map)
(global-set-key [?\C-y] 'kill-line)
(global-set-key [?\C-u] 'scroll-down)
(global-set-key [?\C-l] 'repeat-search-fwd)
(custom-set-variables  '(indent-tabs-mode nil))
(define-key joe-C-c-map "q" 'kill-buffer)
(define-key joe-C-c-map "\C-q" 'kill-buffer)
(define-key joe-C-c-map "w" 'delete-window)
(define-key joe-C-c-map "\C-w" 'delete-window)
(define-key joe-C-c-map "c" 'kill-buffer-and-window)
(define-key joe-C-c-map "\C-c" 'kill-buffer-and-window)
(global-set-key [?\C-c] joe-C-c-map)

