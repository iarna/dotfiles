#!/usr/bin/env perl
use strict;
use warnings;

# This chunk of stuff was generated by App::FatPacker. To find the original
# file's code, look for the end of this BEGIN block or the string 'FATPACK'
BEGIN {
my %fatpacked;

$fatpacked{"App/Every.pm"} = <<'APP_EVERY';
  # ABSTRACT: Easily create and queue cronjobs from the command line
  package App::Every;
  {
    $App::Every::VERSION = '0.1.0';
  }
  use strict;
  use warnings;
  use feature qw( switch say );
  use Cwd;
  use Digest::MD5 qw( md5_hex );
  
  sub help {
      warn "Form: $0 [--help] [-n|--dry-run] [-l] ([num] unit)... [--] program\n";
      warn "--help - Show the manpage for this command.\n";
      warn "-n     - Don't actually install the crontab\n";
      warn "num    - Number of the unit, defaults to 1\n";
      warn "unit   - min(ute)(s), hour(s), day(s), week(s), month(s)\n";
      warn "         or the name of a day of week, eg tue(sday)\n";
      warn "-l     - Add locking so that more then one copy can't run at once.\n";
      warn "--dry-run\n";
      exit(1);
  }
  
  =for future todo
  
  Update grammar to replace optional '--' with required 'do' to separate the
  program.
  
  Later: Without 'do', behave like 'at' and read an ad-hoc script from stdin.
  Also: Small wrapper for 'at' that adds support for a 'do' argument, with a
  set of rc files to alias at with its replacement.  Since 'do' would be invalid
  in an at timespec, it won't interfere with traditional use.
  
  This would ultimately allow for a much more sophisticated grammar
  (eg, Marpa).
  
  If running as root, default to installing in, in order of preference:
      /etc/cron.<period> if available and appropriate
      /etc/cron.d if available
      /etc/crontab
  
  With --user option to install via the crontab command instead.
  Likewise, --system option to try to install in the system crontab even if
  we're not root(?) (with sudo?)
  
      every day at 3pm do program...
  
      every minute on Feb 03 at 3pm do program...
  
      every day in march do program...
  
      at <time>
  
  Where time is HH(:MM)? (24hour time) HH(:MM(am|pm))? (12hour time)
  Or noon or midnight.  Perhaps later, sunrise and sunset.
  
      on <month> <day>
  
  Where month is a full month name or an unambiguous abbreviation and day is
  a number optionally followed by a noise suffix (eg th, nd, etc)
  
      in <month>
  
  Where month is a month as in on.
  
  =cut
  
  
  
  my %monmap = (
      mon   =>1, tue    =>2, wed      =>3, thu     =>4, fri   =>5, sat     =>6, sun   =>7,
      monday=>1, tuesday=>2, wednesday=>3, thursday=>4, friday=>5, saturday=>6, sunday=>7
      );
  
  my %schedule = (
     minute => "*",
     hour   => "*",
     day    => "*",
     month  => "*",
     dow    => "*" );
  
  
  =classmethod sub main( @args )
  
  Takes the same arguments as every commandline. Currently this isn't very
  useful, but it was a first step in pushing the implementation into a module.
  
  =cut
  
  sub main {
      my $class = shift;
      my ($min,$hour,$day,$mon,$year,$dow) = (localtime())[1..6];
      my $lock    = 0;
      my $dry_run = 0;
  
      my %cronenv;
      my @program;
      while (@_) {
          my $amount = 1;
          given (shift) {
              when ('--') {
                  @program = @_;
                  last;
              }
              when ('-l') {
                  $lock = 1;
              }
              when ([qw( -n --dry-run )]) {
                  $dry_run = 1;
              }
              when (/^--help/) {
                  exec("perldoc $0");
              }
              when (/^-/) {
                  help();
              }
              when (/^\d+$/) {
                  ($amount,$_) = ($_,shift);
                  continue;
              }
              when ([qw( min mins minute minutes )]) {
                  @schedule{qw( minute )}          = ("*/$amount");
              }
              when ([qw( hour hours              )]) {
                  @schedule{qw( minute hour)}      = ($min, "*/$amount");
              }
              when (/^[@]hour(ly)?$/) {
                  @schedule{qw( minute hour day month dow )} = (q{@hourly}, q{}, q{}, q{}, q{});
              }
              when ([qw( midnight )]) {
                  @schedule{qw( minute hour day)}  = ("0", "0", "*/$amount");
              }
              when ([qw( day days                )]) {
                  @schedule{qw( minute hour day )} = ($min,$hour,"*/$amount");
              }
              when (/^( [@]day | [@]daily | [@]midnight )$/x) {
                  @schedule{qw( minute hour day month dow )} = (q{@daily}, q{}, q{}, q{}, q{});
              }
              when ([qw( week weeks )]) {
                  die "Don't know how to iterate less then once a week but more then once a month.\n" if $amount > 1;
                  @schedule{qw( minute hour dow )} = ($min,$hour,$dow);
              }
              when (/^[@]week(ly)?$/) {
                  die "Can't set an amount for a weekly entry\n" if $amount > 1;
                  @schedule{qw( minute hour day month dow )} = (q{@weekly}, q{}, q{}, q{}, q{});
              }
              when (\%monmap) {
                  @schedule{qw( minute hour dow )} = ($min,$hour,$monmap{$_});
              }
              when ([qw( month months )]) {
                  @schedule{qw( minute hour day month )} = ($min,$hour,$day,"*/$amount");
              }
              when ([qw( year )]) {
                  @schedule{qw( minte hour day month )} = ($min,$hour,$day,$mon);
              }
              when (/^[@]year(ly)?$/) {
                  @schedule{qw( minute hour day month dow )} = (q{@yearly}, q{}, q{}, q{}, q{});
              }
              when (/^[@]?reboot$/) {
                  @schedule{qw( minute hour day month dow )} = (q{@reboot}, q{}, q{}, q{}, q{});
              }
              default {
                  @program = ($_,@_);
                  last;
              }
          }
      }
      unless (@program) {
          help();
      }
  
      unshift @program, q{cd "}.getcwd().q{"; };
  
      @cronenv{qw( PATH SHELL )} = @ENV{qw( PATH SHELL )};
  
      if ($lock) {
          my $lockfile = "/tmp/every_lock_" .
             md5_hex(join ' ',@schedule{sort keys %schedule}, @program);
          $cronenv{'LOCKFILE'} = $lockfile;
          @program = ('[ ! -f $LOCKFILE -o ! -d /proc/`[ -f $LOCKFILE ] && cat $LOCKFILE` ] && ( echo $$ > $LOCKFILE ;', @program, ' ; rm $LOCKFILE )');
      }
  
      my $crontab = join ' ',  @schedule{qw( minute hour day month dow )}, @program;
      say "$_=$cronenv{$_}" for keys %cronenv;
      say $crontab;
  
      unless ($dry_run) {
          open my $cron, "|-", "crontab";
          print $cron qx{crontab -l 2> /dev/null};
          say $cron "$_=$cronenv{$_}" for keys %cronenv;
          say $cron $crontab;
          close $cron;
      }
  }
  1;
  
  =head1 SYNOPSIS
  
      use App::Every;
  
      App::Every->main( @ARGV );
  
  =head1 DESCRIPTION
  
  Creates and queues a cronjob, see L<every> for details.
  
  =head1 GETTING
  
  You can fetch a current release as a standalone script with:
  
      curl -O https://raw.github.com/iarna/App-Every/master/packed/every && chmod a+x every
  
  And then find out about it with:
  
      ./every --help
APP_EVERY

$fatpacked{"Digest/Perl/MD5.pm"} = <<'DIGEST_PERL_MD5';
  #! /usr/bin/false
  #
  # $Id: MD5.pm,v 1.23 2004/08/27 20:28:25 lackas Exp $
  #
  
  package Digest::Perl::MD5;
  use strict;
  use integer;
  use Exporter;
  use vars qw($VERSION @ISA @EXPORTER @EXPORT_OK);
  
  @EXPORT_OK = qw(md5 md5_hex md5_base64);
  
  @ISA = 'Exporter';
  $VERSION = '1.8';
  
  # I-Vektor
  sub A() { 0x67_45_23_01 }
  sub B() { 0xef_cd_ab_89 }
  sub C() { 0x98_ba_dc_fe }
  sub D() { 0x10_32_54_76 }
  
  # for internal use
  sub MAX() { 0xFFFFFFFF }
  
  # padd a message to a multiple of 64
  sub padding {
      my $l = length (my $msg = shift() . chr(128));    
      $msg .= "\0" x (($l%64<=56?56:120)-$l%64);
      $l = ($l-1)*8;
      $msg .= pack 'VV', $l & MAX , ($l >> 16 >> 16);
  }
  
  
  sub rotate_left($$) {
  	#$_[0] << $_[1] | $_[0] >> (32 - $_[1]);
  	#my $right = $_[0] >> (32 - $_[1]);
  	#my $rmask = (1 << $_[1]) - 1;
  	($_[0] << $_[1]) | (( $_[0] >> (32 - $_[1])  )  & ((1 << $_[1]) - 1));
  	#$_[0] << $_[1] | (($_[0]>> (32 - $_[1])) & (1 << (32 - $_[1])) - 1);
  }
  
  sub gen_code {
    # Discard upper 32 bits on 64 bit archs.
    my $MSK = ((1 << 16) << 16) ? ' & ' . MAX : '';
  #	FF => "X0=rotate_left(((X1&X2)|(~X1&X3))+X0+X4+X6$MSK,X5)+X1$MSK;",
  #	GG => "X0=rotate_left(((X1&X3)|(X2&(~X3)))+X0+X4+X6$MSK,X5)+X1$MSK;",
    my %f = (
  	FF => "X0=rotate_left((X3^(X1&(X2^X3)))+X0+X4+X6$MSK,X5)+X1$MSK;",
  	GG => "X0=rotate_left((X2^(X3&(X1^X2)))+X0+X4+X6$MSK,X5)+X1$MSK;",
  	HH => "X0=rotate_left((X1^X2^X3)+X0+X4+X6$MSK,X5)+X1$MSK;",
  	II => "X0=rotate_left((X2^(X1|(~X3)))+X0+X4+X6$MSK,X5)+X1$MSK;",
    );
    #unless ( (1 << 16) << 16) { %f = %{$CODES{'32bit'}} }
    #else { %f = %{$CODES{'64bit'}} }
  
    my %s = (  # shift lengths
  	S11 => 7, S12 => 12, S13 => 17, S14 => 22, S21 => 5, S22 => 9, S23 => 14,
  	S24 => 20, S31 => 4, S32 => 11, S33 => 16, S34 => 23, S41 => 6, S42 => 10,
  	S43 => 15, S44 => 21
    );
  
    my $insert = "\n";
    while(<DATA>) {
  	chomp;
  	next unless /^[FGHI]/;
  	my ($func,@x) = split /,/;
  	my $c = $f{$func};
  	$c =~ s/X(\d)/$x[$1]/g;
  	$c =~ s/(S\d{2})/$s{$1}/;
  	$c =~ s/^(.*)=rotate_left\((.*),(.*)\)\+(.*)$//;
  
  	my $su = 32 - $3;
  	my $sh = (1 << $3) - 1;
  
  	$c = "$1=(((\$r=$2)<<$3)|((\$r>>$su)&$sh))+$4";
  
  	#my $rotate = "(($2 << $3) || (($2 >> (32 - $3)) & (1 << $2) - 1)))"; 
  	# $c = "\$r = $2;
  	# $1 = ((\$r << $3) | ((\$r >> (32 - $3))  & ((1 << $3) - 1))) + $4";
  	$insert .= "\t$c\n";
    }
    close DATA;
    
    my $dump = '
    sub round {
  	my ($a,$b,$c,$d) = @_[0 .. 3];
  	my $r;' . $insert . '
  	$_[0]+$a' . $MSK . ', $_[1]+$b ' . $MSK . 
          ', $_[2]+$c' . $MSK . ', $_[3]+$d' . $MSK . ';
    }';
    eval $dump;
    # print "$dump\n";
    # exit 0;
  }
  
  gen_code();
  
  #########################################
  # Private output converter functions:
  sub _encode_hex { unpack 'H*', $_[0] }
  sub _encode_base64 {
  	my $res;
  	while ($_[0] =~ /(.{1,45})/gs) {
  		$res .= substr pack('u', $1), 1;
  		chop $res;
  	}
  	$res =~ tr|` -_|AA-Za-z0-9+/|;#`
  	chop $res; chop $res;
  	$res
  }
  
  #########################################
  # OOP interface:
  sub new {
  	my $proto = shift;
  	my $class = ref $proto || $proto;
  	my $self = {};
  	bless $self, $class;
  	$self->reset();
  	$self
  }
  
  sub reset {
  	my $self = shift;
  	delete $self->{_data};
  	$self->{_state} = [A,B,C,D];
  	$self->{_length} = 0;
  	$self
  }
  
  sub add {
  	my $self = shift;
  	$self->{_data} .= join '', @_ if @_;
  	my ($i,$c);
  	for $i (0 .. (length $self->{_data})/64-1) {
  		my @X = unpack 'V16', substr $self->{_data}, $i*64, 64;
  		@{$self->{_state}} = round(@{$self->{_state}},@X);
  		++$c;
  	}
  	if ($c) {
  		substr ($self->{_data}, 0, $c*64) = '';
  		$self->{_length} += $c*64;
  	}
  	$self
  }
  
  sub finalize {
  	my $self = shift;
  	$self->{_data} .= chr(128);
      my $l = $self->{_length} + length $self->{_data};
      $self->{_data} .= "\0" x (($l%64<=56?56:120)-$l%64);
      $l = ($l-1)*8;
      $self->{_data} .= pack 'VV', $l & MAX , ($l >> 16 >> 16);
  	$self->add();
  	$self
  }
  
  sub addfile {
    	my ($self,$fh) = @_;
  	if (!ref($fh) && ref(\$fh) ne "GLOB") {
  	    require Symbol;
  	    $fh = Symbol::qualify($fh, scalar caller);
  	}
  	# $self->{_data} .= do{local$/;<$fh>};
  	my $read = 0;
  	my $buffer = '';
  	$self->add($buffer) while $read = read $fh, $buffer, 8192;
  	die __PACKAGE__, " read failed: $!" unless defined $read;
  	$self
  }
  
  sub add_bits {
  	my $self = shift;
  	return $self->add( pack 'B*', shift ) if @_ == 1;
  	my ($b,$n) = @_;
  	die __PACKAGE__, " Invalid number of bits\n" if $n%8;
  	$self->add( substr $b, 0, $n/8 )
  }
  
  sub digest {
  	my $self = shift;
  	$self->finalize();
  	my $res = pack 'V4', @{$self->{_state}};
  	$self->reset();
  	$res
  }
  
  sub hexdigest {
  	_encode_hex($_[0]->digest)
  }
  
  sub b64digest {
  	_encode_base64($_[0]->digest)
  }
  
  sub clone {
  	my $self = shift;
  	my $clone = { 
  		_state => [@{$self->{_state}}],
  		_length => $self->{_length},
  		_data => $self->{_data}
  	};
  	bless $clone, ref $self || $self;
  }
  
  #########################################
  # Procedural interface:
  sub md5 {
  	my $message = padding(join'',@_);
  	my ($a,$b,$c,$d) = (A,B,C,D);
  	my $i;
  	for $i (0 .. (length $message)/64-1) {
  		my @X = unpack 'V16', substr $message,$i*64,64;	
  		($a,$b,$c,$d) = round($a,$b,$c,$d,@X);
  	}
  	pack 'V4',$a,$b,$c,$d;
  }
  sub md5_hex { _encode_hex &md5 } 
  sub md5_base64 { _encode_base64 &md5 }
  
  
  1;
  
  =head1 NAME
  
  Digest::MD5::Perl - Perl implementation of Ron Rivests MD5 Algorithm
  
  =head1 DISCLAIMER
  
  This is B<not> an interface (like C<Digest::MD5>) but a Perl implementation of MD5.
  It is written in perl only and because of this it is slow but it works without C-Code.
  You should use C<Digest::MD5> instead of this module if it is available.
  This module is only usefull for
  
  =over 4
  
  =item
  
  computers where you cannot install C<Digest::MD5> (e.g. lack of a C-Compiler)
  
  =item
  
  encrypting only small amounts of data (less than one million bytes). I use it to
  hash passwords.
  
  =item
  
  educational purposes
  
  =back
  
  =head1 SYNOPSIS
  
   # Functional style
   use Digest::MD5  qw(md5 md5_hex md5_base64);
  
   $hash = md5 $data;
   $hash = md5_hex $data;
   $hash = md5_base64 $data;
      
  
   # OO style
   use Digest::MD5;
  
   $ctx = Digest::MD5->new;
  
   $ctx->add($data);
   $ctx->addfile(*FILE);
  
   $digest = $ctx->digest;
   $digest = $ctx->hexdigest;
   $digest = $ctx->b64digest;
  
  =head1 DESCRIPTION
  
  This modules has the same interface as the much faster C<Digest::MD5>. So you can
  easily exchange them, e.g.
  
  	BEGIN {
  	  eval {
  	    require Digest::MD5;
  	    import Digest::MD5 'md5_hex'
  	  };
  	  if ($@) { # ups, no Digest::MD5
  	    require Digest::Perl::MD5;
  	    import Digest::Perl::MD5 'md5_hex'
  	  }		
  	}
  
  If the C<Digest::MD5> module is available it is used and if not you take
  C<Digest::Perl::MD5>.
  
  You can also install the Perl part of Digest::MD5 together with Digest::Perl::MD5
  and use Digest::MD5 as normal, it falls back to Digest::Perl::MD5 if it
  cannot load its object files.
  
  For a detailed Documentation see the C<Digest::MD5> module.
  
  =head1 EXAMPLES
  
  The simplest way to use this library is to import the md5_hex()
  function (or one of its cousins):
  
      use Digest::Perl::MD5 'md5_hex';
      print 'Digest is ', md5_hex('foobarbaz'), "\n";
  
  The above example would print out the message
  
      Digest is 6df23dc03f9b54cc38a0fc1483df6e21
  
  provided that the implementation is working correctly.  The same
  checksum can also be calculated in OO style:
  
      use Digest::MD5;
      
      $md5 = Digest::MD5->new;
      $md5->add('foo', 'bar');
      $md5->add('baz');
      $digest = $md5->hexdigest;
      
      print "Digest is $digest\n";
  
  The digest methods are destructive. That means you can only call them
  once and the $md5 objects is reset after use. You can make a copy with clone:
  
  	$md5->clone->hexdigest
  
  =head1 LIMITATIONS
  
  This implementation of the MD5 algorithm has some limitations:
  
  =over 4
  
  =item
  
  It's slow, very slow. I've done my very best but Digest::MD5 is still about 100 times faster.
  You can only encrypt Data up to one million bytes in an acceptable time. But it's very usefull
  for encrypting small amounts of data like passwords.
  
  =item
  
  You can only encrypt up to 2^32 bits = 512 MB on 32bit archs. But You should
  use C<Digest::MD5> for those amounts of data anyway.
  
  =back
  
  =head1 SEE ALSO
  
  L<Digest::MD5>
  
  L<md5(1)>
  
  RFC 1321
  
  tools/md5: a small BSD compatible md5 tool written in pure perl.
  
  =head1 COPYRIGHT
  
  This library is free software; you can redistribute it and/or
  modify it under the same terms as Perl itself.
  
   Copyright 2000 Christian Lackas, Imperia Software Solutions
   Copyright 1998-1999 Gisle Aas.
   Copyright 1995-1996 Neil Winton.
   Copyright 1991-1992 RSA Data Security, Inc.
  
  The MD5 algorithm is defined in RFC 1321. The basic C code
  implementing the algorithm is derived from that in the RFC and is
  covered by the following copyright:
  
  =over 4
  
  =item
  
  Copyright (C) 1991-1992, RSA Data Security, Inc. Created 1991. All
  rights reserved.
  
  License to copy and use this software is granted provided that it
  is identified as the "RSA Data Security, Inc. MD5 Message-Digest
  Algorithm" in all material mentioning or referencing this software
  or this function.
  
  License is also granted to make and use derivative works provided
  that such works are identified as "derived from the RSA Data
  Security, Inc. MD5 Message-Digest Algorithm" in all material
  mentioning or referencing the derived work.
  
  RSA Data Security, Inc. makes no representations concerning either
  the merchantability of this software or the suitability of this
  software for any particular purpose. It is provided "as is"
  without express or implied warranty of any kind.
  
  These notices must be retained in any copies of any part of this
  documentation and/or software.
  
  =back
  
  This copyright does not prohibit distribution of any version of Perl
  containing this extension under the terms of the GNU or Artistic
  licenses.
  
  =head1 AUTHORS
  
  The original MD5 interface was written by Neil Winton
  (<N.Winton (at) axion.bt.co.uk>).
  
  C<Digest::MD5> was made by Gisle Aas <gisle (at) aas.no> (I took his Interface
  and part of the documentation).
  
  Thanks to Guido Flohr for his 'use integer'-hint.
  
  This release was made by Christian Lackas <delta (at) lackas.net>.
  
  =cut
  
  __DATA__
  FF,$a,$b,$c,$d,$_[4],7,0xd76aa478,/* 1 */
  FF,$d,$a,$b,$c,$_[5],12,0xe8c7b756,/* 2 */
  FF,$c,$d,$a,$b,$_[6],17,0x242070db,/* 3 */
  FF,$b,$c,$d,$a,$_[7],22,0xc1bdceee,/* 4 */
  FF,$a,$b,$c,$d,$_[8],7,0xf57c0faf,/* 5 */
  FF,$d,$a,$b,$c,$_[9],12,0x4787c62a,/* 6 */
  FF,$c,$d,$a,$b,$_[10],17,0xa8304613,/* 7 */
  FF,$b,$c,$d,$a,$_[11],22,0xfd469501,/* 8 */
  FF,$a,$b,$c,$d,$_[12],7,0x698098d8,/* 9 */
  FF,$d,$a,$b,$c,$_[13],12,0x8b44f7af,/* 10 */
  FF,$c,$d,$a,$b,$_[14],17,0xffff5bb1,/* 11 */
  FF,$b,$c,$d,$a,$_[15],22,0x895cd7be,/* 12 */
  FF,$a,$b,$c,$d,$_[16],7,0x6b901122,/* 13 */
  FF,$d,$a,$b,$c,$_[17],12,0xfd987193,/* 14 */
  FF,$c,$d,$a,$b,$_[18],17,0xa679438e,/* 15 */
  FF,$b,$c,$d,$a,$_[19],22,0x49b40821,/* 16 */ 
  GG,$a,$b,$c,$d,$_[5],5,0xf61e2562,/* 17 */
  GG,$d,$a,$b,$c,$_[10],9,0xc040b340,/* 18 */
  GG,$c,$d,$a,$b,$_[15],14,0x265e5a51,/* 19 */
  GG,$b,$c,$d,$a,$_[4],20,0xe9b6c7aa,/* 20 */
  GG,$a,$b,$c,$d,$_[9],5,0xd62f105d,/* 21 */
  GG,$d,$a,$b,$c,$_[14],9,0x2441453,/* 22 */
  GG,$c,$d,$a,$b,$_[19],14,0xd8a1e681,/* 23 */
  GG,$b,$c,$d,$a,$_[8],20,0xe7d3fbc8,/* 24 */
  GG,$a,$b,$c,$d,$_[13],5,0x21e1cde6,/* 25 */
  GG,$d,$a,$b,$c,$_[18],9,0xc33707d6,/* 26 */
  GG,$c,$d,$a,$b,$_[7],14,0xf4d50d87,/* 27 */
  GG,$b,$c,$d,$a,$_[12],20,0x455a14ed,/* 28 */
  GG,$a,$b,$c,$d,$_[17],5,0xa9e3e905,/* 29 */
  GG,$d,$a,$b,$c,$_[6],9,0xfcefa3f8,/* 30 */
  GG,$c,$d,$a,$b,$_[11],14,0x676f02d9,/* 31 */
  GG,$b,$c,$d,$a,$_[16],20,0x8d2a4c8a,/* 32 */
  HH,$a,$b,$c,$d,$_[9],4,0xfffa3942,/* 33 */
  HH,$d,$a,$b,$c,$_[12],11,0x8771f681,/* 34 */
  HH,$c,$d,$a,$b,$_[15],16,0x6d9d6122,/* 35 */
  HH,$b,$c,$d,$a,$_[18],23,0xfde5380c,/* 36 */
  HH,$a,$b,$c,$d,$_[5],4,0xa4beea44,/* 37 */
  HH,$d,$a,$b,$c,$_[8],11,0x4bdecfa9,/* 38 */
  HH,$c,$d,$a,$b,$_[11],16,0xf6bb4b60,/* 39 */
  HH,$b,$c,$d,$a,$_[14],23,0xbebfbc70,/* 40 */
  HH,$a,$b,$c,$d,$_[17],4,0x289b7ec6,/* 41 */
  HH,$d,$a,$b,$c,$_[4],11,0xeaa127fa,/* 42 */
  HH,$c,$d,$a,$b,$_[7],16,0xd4ef3085,/* 43 */
  HH,$b,$c,$d,$a,$_[10],23,0x4881d05,/* 44 */
  HH,$a,$b,$c,$d,$_[13],4,0xd9d4d039,/* 45 */
  HH,$d,$a,$b,$c,$_[16],11,0xe6db99e5,/* 46 */
  HH,$c,$d,$a,$b,$_[19],16,0x1fa27cf8,/* 47 */
  HH,$b,$c,$d,$a,$_[6],23,0xc4ac5665,/* 48 */
  II,$a,$b,$c,$d,$_[4],6,0xf4292244,/* 49 */
  II,$d,$a,$b,$c,$_[11],10,0x432aff97,/* 50 */
  II,$c,$d,$a,$b,$_[18],15,0xab9423a7,/* 51 */
  II,$b,$c,$d,$a,$_[9],21,0xfc93a039,/* 52 */
  II,$a,$b,$c,$d,$_[16],6,0x655b59c3,/* 53 */
  II,$d,$a,$b,$c,$_[7],10,0x8f0ccc92,/* 54 */
  II,$c,$d,$a,$b,$_[14],15,0xffeff47d,/* 55 */
  II,$b,$c,$d,$a,$_[5],21,0x85845dd1,/* 56 */
  II,$a,$b,$c,$d,$_[12],6,0x6fa87e4f,/* 57 */
  II,$d,$a,$b,$c,$_[19],10,0xfe2ce6e0,/* 58 */
  II,$c,$d,$a,$b,$_[10],15,0xa3014314,/* 59 */
  II,$b,$c,$d,$a,$_[17],21,0x4e0811a1,/* 60 */
  II,$a,$b,$c,$d,$_[8],6,0xf7537e82,/* 61 */
  II,$d,$a,$b,$c,$_[15],10,0xbd3af235,/* 62 */
  II,$c,$d,$a,$b,$_[6],15,0x2ad7d2bb,/* 63 */
  II,$b,$c,$d,$a,$_[13],21,0xeb86d391,/* 64 */
DIGEST_PERL_MD5

$fatpacked{"i686-linux/Digest/MD5.pm"} = <<'I686-LINUX_DIGEST_MD5';
  package Digest::MD5;
  
  use strict;
  use vars qw($VERSION @ISA @EXPORT_OK);
  
  $VERSION = '2.52';
  
  require Exporter;
  *import = \&Exporter::import;
  @EXPORT_OK = qw(md5 md5_hex md5_base64);
  
  eval {
      require Digest::base;
      push(@ISA, 'Digest::base');
  };
  if ($@) {
      my $err = $@;
      *add_bits = sub { die $err };
  }
  
  
  eval {
      require XSLoader;
      XSLoader::load('Digest::MD5', $VERSION);
  };
  if ($@) {
      my $olderr = $@;
      eval {
  	# Try to load the pure perl version
  	require Digest::Perl::MD5;
  
  	Digest::Perl::MD5->import(qw(md5 md5_hex md5_base64));
  	unshift(@ISA, "Digest::Perl::MD5");  # make OO interface work
      };
      if ($@) {
  	# restore the original error
  	die $olderr;
      }
  }
  else {
      *reset = \&new;
  }
  
  1;
  __END__
  
  =head1 NAME
  
  Digest::MD5 - Perl interface to the MD5 Algorithm
  
  =head1 SYNOPSIS
  
   # Functional style
   use Digest::MD5 qw(md5 md5_hex md5_base64);
  
   $digest = md5($data);
   $digest = md5_hex($data);
   $digest = md5_base64($data);
  
   # OO style
   use Digest::MD5;
  
   $ctx = Digest::MD5->new;
  
   $ctx->add($data);
   $ctx->addfile($file_handle);
  
   $digest = $ctx->digest;
   $digest = $ctx->hexdigest;
   $digest = $ctx->b64digest;
  
  =head1 DESCRIPTION
  
  The C<Digest::MD5> module allows you to use the RSA Data Security
  Inc. MD5 Message Digest algorithm from within Perl programs.  The
  algorithm takes as input a message of arbitrary length and produces as
  output a 128-bit "fingerprint" or "message digest" of the input.
  
  Note that the MD5 algorithm is not as strong as it used to be.  It has
  since 2005 been easy to generate different messages that produce the
  same MD5 digest.  It still seems hard to generate messages that
  produce a given digest, but it is probably wise to move to stronger
  algorithms for applications that depend on the digest to uniquely identify
  a message.
  
  The C<Digest::MD5> module provide a procedural interface for simple
  use, as well as an object oriented interface that can handle messages
  of arbitrary length and which can read files directly.
  
  =head1 FUNCTIONS
  
  The following functions are provided by the C<Digest::MD5> module.
  None of these functions are exported by default.
  
  =over 4
  
  =item md5($data,...)
  
  This function will concatenate all arguments, calculate the MD5 digest
  of this "message", and return it in binary form.  The returned string
  will be 16 bytes long.
  
  The result of md5("a", "b", "c") will be exactly the same as the
  result of md5("abc").
  
  =item md5_hex($data,...)
  
  Same as md5(), but will return the digest in hexadecimal form. The
  length of the returned string will be 32 and it will only contain
  characters from this set: '0'..'9' and 'a'..'f'.
  
  =item md5_base64($data,...)
  
  Same as md5(), but will return the digest as a base64 encoded string.
  The length of the returned string will be 22 and it will only contain
  characters from this set: 'A'..'Z', 'a'..'z', '0'..'9', '+' and
  '/'.
  
  Note that the base64 encoded string returned is not padded to be a
  multiple of 4 bytes long.  If you want interoperability with other
  base64 encoded md5 digests you might want to append the redundant
  string "==" to the result.
  
  =back
  
  =head1 METHODS
  
  The object oriented interface to C<Digest::MD5> is described in this
  section.  After a C<Digest::MD5> object has been created, you will add
  data to it and finally ask for the digest in a suitable format.  A
  single object can be used to calculate multiple digests.
  
  The following methods are provided:
  
  =over 4
  
  =item $md5 = Digest::MD5->new
  
  The constructor returns a new C<Digest::MD5> object which encapsulate
  the state of the MD5 message-digest algorithm.
  
  If called as an instance method (i.e. $md5->new) it will just reset the
  state the object to the state of a newly created object.  No new
  object is created in this case.
  
  =item $md5->reset
  
  This is just an alias for $md5->new.
  
  =item $md5->clone
  
  This a copy of the $md5 object. It is useful when you do not want to
  destroy the digests state, but need an intermediate value of the
  digest, e.g. when calculating digests iteratively on a continuous data
  stream.  Example:
  
      my $md5 = Digest::MD5->new;
      while (<>) {
  	$md5->add($_);
  	print "Line $.: ", $md5->clone->hexdigest, "\n";
      }
  
  =item $md5->add($data,...)
  
  The $data provided as argument are appended to the message we
  calculate the digest for.  The return value is the $md5 object itself.
  
  All these lines will have the same effect on the state of the $md5
  object:
  
      $md5->add("a"); $md5->add("b"); $md5->add("c");
      $md5->add("a")->add("b")->add("c");
      $md5->add("a", "b", "c");
      $md5->add("abc");
  
  =item $md5->addfile($io_handle)
  
  The $io_handle will be read until EOF and its content appended to the
  message we calculate the digest for.  The return value is the $md5
  object itself.
  
  The addfile() method will croak() if it fails reading data for some
  reason.  If it croaks it is unpredictable what the state of the $md5
  object will be in. The addfile() method might have been able to read
  the file partially before it failed.  It is probably wise to discard
  or reset the $md5 object if this occurs.
  
  In most cases you want to make sure that the $io_handle is in
  C<binmode> before you pass it as argument to the addfile() method.
  
  =item $md5->add_bits($data, $nbits)
  
  =item $md5->add_bits($bitstring)
  
  Since the MD5 algorithm is byte oriented you might only add bits as
  multiples of 8, so you probably want to just use add() instead.  The
  add_bits() method is provided for compatibility with other digest
  implementations.  See L<Digest> for description of the arguments
  that add_bits() take.
  
  =item $md5->digest
  
  Return the binary digest for the message.  The returned string will be
  16 bytes long.
  
  Note that the C<digest> operation is effectively a destructive,
  read-once operation. Once it has been performed, the C<Digest::MD5>
  object is automatically C<reset> and can be used to calculate another
  digest value.  Call $md5->clone->digest if you want to calculate the
  digest without resetting the digest state.
  
  =item $md5->hexdigest
  
  Same as $md5->digest, but will return the digest in hexadecimal
  form. The length of the returned string will be 32 and it will only
  contain characters from this set: '0'..'9' and 'a'..'f'.
  
  =item $md5->b64digest
  
  Same as $md5->digest, but will return the digest as a base64 encoded
  string.  The length of the returned string will be 22 and it will only
  contain characters from this set: 'A'..'Z', 'a'..'z', '0'..'9', '+'
  and '/'.
  
  
  The base64 encoded string returned is not padded to be a multiple of 4
  bytes long.  If you want interoperability with other base64 encoded
  md5 digests you might want to append the string "==" to the result.
  
  =back
  
  
  =head1 EXAMPLES
  
  The simplest way to use this library is to import the md5_hex()
  function (or one of its cousins):
  
      use Digest::MD5 qw(md5_hex);
      print "Digest is ", md5_hex("foobarbaz"), "\n";
  
  The above example would print out the message:
  
      Digest is 6df23dc03f9b54cc38a0fc1483df6e21
  
  The same checksum can also be calculated in OO style:
  
      use Digest::MD5;
      
      $md5 = Digest::MD5->new;
      $md5->add('foo', 'bar');
      $md5->add('baz');
      $digest = $md5->hexdigest;
      
      print "Digest is $digest\n";
  
  With OO style, you can break the message arbitrarily.  This means that we
  are no longer limited to have space for the whole message in memory, i.e.
  we can handle messages of any size.
  
  This is useful when calculating checksum for files:
  
      use Digest::MD5;
  
      my $filename = shift || "/etc/passwd";
      open (my $fh, '<', $filename) or die "Can't open '$filename': $!";
      binmode($fh);
  
      $md5 = Digest::MD5->new;
      while (<$fh>) {
          $md5->add($_);
      }
      close($fh);
      print $md5->b64digest, " $filename\n";
  
  Or we can use the addfile method for more efficient reading of
  the file:
  
      use Digest::MD5;
  
      my $filename = shift || "/etc/passwd";
      open (my $fh, '<', $filename) or die "Can't open '$filename': $!";
      binmode ($fh);
  
      print Digest::MD5->new->addfile($fh)->hexdigest, " $filename\n";
  
  Perl 5.8 support Unicode characters in strings.  Since the MD5
  algorithm is only defined for strings of bytes, it can not be used on
  strings that contains chars with ordinal number above 255.  The MD5
  functions and methods will croak if you try to feed them such input
  data:
  
      use Digest::MD5 qw(md5_hex);
  
      my $str = "abc\x{300}";
      print md5_hex($str), "\n";  # croaks
      # Wide character in subroutine entry
  
  What you can do is calculate the MD5 checksum of the UTF-8
  representation of such strings.  This is achieved by filtering the
  string through encode_utf8() function:
  
      use Digest::MD5 qw(md5_hex);
      use Encode qw(encode_utf8);
  
      my $str = "abc\x{300}";
      print md5_hex(encode_utf8($str)), "\n";
      # 8c2d46911f3f5a326455f0ed7a8ed3b3
  
  =head1 SEE ALSO
  
  L<Digest>,
  L<Digest::MD2>,
  L<Digest::SHA>,
  L<Digest::HMAC>
  
  L<md5sum(1)>
  
  RFC 1321
  
  http://en.wikipedia.org/wiki/MD5
  
  The paper "How to Break MD5 and Other Hash Functions" by Xiaoyun Wang
  and Hongbo Yu.
  
  =head1 COPYRIGHT
  
  This library is free software; you can redistribute it and/or
  modify it under the same terms as Perl itself.
  
   Copyright 1998-2003 Gisle Aas.
   Copyright 1995-1996 Neil Winton.
   Copyright 1991-1992 RSA Data Security, Inc.
  
  The MD5 algorithm is defined in RFC 1321. This implementation is
  derived from the reference C code in RFC 1321 which is covered by
  the following copyright statement:
  
  =over 4
  
  =item
  
  Copyright (C) 1991-2, RSA Data Security, Inc. Created 1991. All
  rights reserved.
  
  License to copy and use this software is granted provided that it
  is identified as the "RSA Data Security, Inc. MD5 Message-Digest
  Algorithm" in all material mentioning or referencing this software
  or this function.
  
  License is also granted to make and use derivative works provided
  that such works are identified as "derived from the RSA Data
  Security, Inc. MD5 Message-Digest Algorithm" in all material
  mentioning or referencing the derived work.
  
  RSA Data Security, Inc. makes no representations concerning either
  the merchantability of this software or the suitability of this
  software for any particular purpose. It is provided "as is"
  without express or implied warranty of any kind.
  
  These notices must be retained in any copies of any part of this
  documentation and/or software.
  
  =back
  
  This copyright does not prohibit distribution of any version of Perl
  containing this extension under the terms of the GNU or Artistic
  licenses.
  
  =head1 AUTHORS
  
  The original C<MD5> interface was written by Neil Winton
  (C<N.Winton@axion.bt.co.uk>).
  
  The C<Digest::MD5> module is written by Gisle Aas <gisle@ActiveState.com>.
  
  =cut
I686-LINUX_DIGEST_MD5

s/^  //mg for values %fatpacked;

unshift @INC, sub {
  if (my $fat = $fatpacked{$_[1]}) {
    open my $fh, '<', \$fat
      or die "FatPacker error loading $_[1] (could be a perl installation issue?)";
    return $fh;
  }
  return
};

} # END OF FATPACK CODE

use App::Every;

App::Every->main( @ARGV );

=pod

=head1 NAME

every - Easily create and queue cronjobs from the command line

=head1 SYNOPSIS

Form: every [--help] [-n|--dry-run] [-l] ([num] unit)... [--] program

For example:

    every day dosomething

    every 3 hours dosomething

    every @reboot dosomething

=head1 DESCRIPTION

Create and installs a crontab entry for you from a simple readable
specifier.  To see what crontab the tool will create, pass just --dry-run or
-n and it will print out the crontab entry without installing it.  Crontabs
will be installed in the current user's crontab.  You can view them in the
usual way (ie, crontab -l).

Commands will always be run from the directory you were in when you ran
every, so "./do_something" is perfectly valid.  Further, your path and shell
will be maintained, so feel free to schedule shell commands, or things from
your ~/bin or what not.

The "-l" command provides job locking, so that if your command hasn't exited
by the time cron ticks again, you won't end up with second copy running.

=head1 OPTIONS

--help - Display this page.

--dry-run

-n     - Don't actually install the crontab

-l     - Add locking so that more then one copy can't run at once

num    - Number of the unit, defaults to 1

unit   - Unit can be min(ute)(s), hour(s), day(s), week(s), month(s) or the
name of a day of week, eg tue(sday).

Or instead of a number plus a unit, you can pass in @daily, @weekly, @yearly
or @reboot which will cause your command to be run every day, week, year or
on reboot, respectively.

=head1 JUSTIFICATION

This is intended to be as easy to use as "at", but for recurring jobs rather
then one-offs.  I'd found myself having a bad habit of running tasks in
loops in my shell with sleeps, rather then creating cron entries-- this is
intended to encourage me (and you!) to actually use cron.


=head1 AUTHOR

Rebecca Turner <becca@referencethis.com>

=head1 COPYRIGHT AND LICENSE

This software is copyright (c) 2012 by Rebecca Turner.

This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.

=head1 DISCLAIMER OF WARRANTY

BECAUSE THIS SOFTWARE IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY
FOR THE SOFTWARE, TO THE EXTENT PERMITTED BY APPLICABLE LAW. EXCEPT
WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER
PARTIES PROVIDE THE SOFTWARE "AS IS" WITHOUT WARRANTY OF ANY KIND,
EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
PURPOSE. THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE
SOFTWARE IS WITH YOU. SHOULD THE SOFTWARE PROVE DEFECTIVE, YOU ASSUME
THE COST OF ALL NECESSARY SERVICING, REPAIR, OR CORRECTION.

IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING
WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR
REDISTRIBUTE THE SOFTWARE AS PERMITTED BY THE ABOVE LICENCE, BE LIABLE
TO YOU FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL, OR
CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE
SOFTWARE (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING
RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A
FAILURE OF THE SOFTWARE TO OPERATE WITH ANY OTHER SOFTWARE), EVEN IF
SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH
DAMAGES.

=cut

